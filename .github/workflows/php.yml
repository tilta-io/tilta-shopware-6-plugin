on:
    push:
        branches:
            - '*'
            - 'task/*'

env:
    MODULE_NAME: TiltaPaymentSW6
    MODULE_DIR: custom/plugins/TiltaPaymentSW6
    COMPOSER_NAME: tilta/shopware6-payment-module
    TEST_DATABASE_URL: "mysql://root:root@127.0.0.1:3306/shopware"

permissions:
    contents: read

jobs:
    lint:
        name: Lint / PHPUnit (Shopware ${{ matrix.shopware-version }}, PHP ${{ matrix.php-version }}, MySQL ${{ matrix.mysql-versions }} on ${{ matrix.operating-system }})
        runs-on: ${{ matrix.operating-system }}
        strategy:
            matrix:
                operating-system: [ 'ubuntu-latest' ]
                php-version: [ '7.4', '8.0', '8.1', '8.2' ]
                mysql-versions: [ '5.7', '8.0' ]
                shopware-version: [ 'v6.4.14.0', 'v6.4.15.0', 'v6.4.16.0', 'v6.4.17.0', 'v6.4.18.0', 'v6.4.19.0', 'v6.4.20.0' ]
            fail-fast: false
            max-parallel: 10
        services:
            mysql:
                image: mysql:${{ matrix.mysql-versions }}
                env:
                    MYSQL_DATABASE: shopware
                    MYSQL_ROOT_PASSWORD: root
                ports:
                    - 3306:3306
        steps:

            -   name: Install PHP
                uses: shivammathur/setup-php@master
                with:
                    php-version: ${{ matrix.php-version }}
                    extensions: mbstring, xdebug, curl, dom, fileinfo, gd, iconv, intl, json, xml, mbstring, pdo, phar, zip, sodium, pdo_mysql
                    tools: composer:2.2

            -   name: "Check PHP Version"
                run: php -v

            -   name: "Check Composer Version"
                run: composer -V

            -   name: "Check PHP Extensions"
                run: php -m

            -   name: "checkout Shopware (without flex template)"
                if: matrix.php-version < 8.0
                uses: actions/checkout@v3
                with:
                    repository: shopware/production
                    ref: ${{ matrix.shopware-version }}

            -   name: "checkout Shopware (with flex template)"
                if: matrix.php-version >= 8.0
                uses: actions/checkout@v3
                with:
                    repository: shopware/production
                    ref: 'flex'

            -   name: "Checkout ${{ env.COMPOSER_NAME }}"
                uses: actions/checkout@v3
                with:
                    path: ${{ env.MODULE_DIR }}

            -   name: "Get composer cache directory"
                id: composer-cache
                run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            -   name: "Cache Composer dependencies"
                uses: actions/cache@v3
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ matrix.operating-system }}-${{ matrix.php-version }}-${{ matrix.shopware-version }}-${{ hashFiles('**/composer.lock') }}

            -   name: "Install Shopware dependencies (with flex template)"
                if: matrix.php-version >= 8.0
                # Install Shopware with --no-dev to prevent that dev-tools of the module got in conflict with the tools of shopware
                run: |
                    composer req shopware/administration:${{ matrix.shopware-version }} shopware/core:${{ matrix.shopware-version }} shopware/elasticsearch:${{ matrix.shopware-version }} shopware/storefront:${{ matrix.shopware-version }} --no-update
                    composer install

            -   name: "Install Shopware dependencies (without flex template)"
                if: matrix.php-version < 8.0
                # Install Shopware with --no-dev to prevent that dev-tools of the module got in conflict with the tools of shopware
                run: |
                    composer install --no-scripts

            ######## TEMPORARY ########
            ## util sdk got released ##
            ######## TEMPORARY ########
            -   run: |
                    composer config prefer-stable true
                    composer config minimum-stability dev
            ######## TEMPORARY ########
            ########    END    ########
            ######## TEMPORARY ########

            -   name: "Install ${{ env.COMPOSER_NAME }}"
                run: |
                    composer config prefer-stable true
                    composer config minimum-stability dev
                    composer config repositories.local-plugins '{ "type": "path", "url": "custom/plugins/*", "options": { "symlink": true } }'
                    composer req ${{ env.COMPOSER_NAME }} --no-scripts

            -   name: "Install DEV-Tools"
                working-directory: ${{ env.MODULE_DIR }}
                run: |
                    composer remove shopware/* --no-update
                    composer install

            -   name: "Run PHPStan"
                working-directory: ${{ env.MODULE_DIR }}
                run: ./vendor/bin/phpstan analyse --autoload-file ../../../vendor/autoload.php

            -   name: "Check Code style (easy-coding-style)"
                working-directory: ${{ env.MODULE_DIR }}
                run: ./vendor/bin/ecs

            -   name: "Check Code style (rector)"
                working-directory: ${{ env.MODULE_DIR }}
                run: ./vendor/bin/rector process --dry-run --autoload-file ../../../vendor/autoload.php

            # workaround: remove the web_profiler service definition because package is not installed.
            -   name: "remove web_profiler service-definition from shopware package"
                if: matrix.shopware-version == 'v6.4.16.0' || matrix.shopware-version == 'v6.4.15.0' || matrix.shopware-version == 'v6.4.14.0'
                run: rm -rf ./vendor/shopware/core/Profiling/Resources/config/packages/test/web_profiler.yaml

            # Workaround. The variables are required for shopware to work properly during unit-testing
            -   name: "Install Shopware for unit-testing"
                run: |
                    echo DATABASE_URL=${{ env.TEST_DATABASE_URL }} >> .env
                    echo MAILER_DSN=null://null >> .env
                    echo OPENSEARCH_URL=http://localhost:9200 >> .env
                    echo LOCK_DSN=flock >> .env
                    echo MAILER_DSN=null://null >> .env
                    echo APP_SECRET=se$cr$t >> .env
                    echo REDIS_CACHE_HOST=127.0.0.1 >> .env
                    echo REDIS_CACHE_PORT=123 >> .env
                    echo REDIS_SESSION_HOST=127.0.0.1 >> .env
                    echo REDIS_SESSION_PORT=123 >> .env
                    echo SHOPWARE_HTTP_CACHE_ENABLED=0 >> .env
                    echo STOREFRONT_PROXY_URL=http://localhost:80 >> .env
                    bin/console system:install --basic-setup

            -   name: "Run PHPUnit Tests"
                working-directory: custom/plugins/${{ env.MODULE_NAME }}
                run: SYMFONY_DEPRECATIONS_HELPER=disabled ./vendor/bin/phpunit --testdox
